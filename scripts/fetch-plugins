#!/usr/bin/env node

const fs = require('fs');
const got = require('got');
const path = require('path');
const semver = require('semver');

const projectDir = path.resolve(__dirname, '..');
const dontBreakFilePath = path.join(projectDir, '.dont-break.json');

const excludedPlugins = {
  'fs': '*',
  'image': '*',
  'jsdom': '*',
  'moment': '*'
};

function checkPluginPolicy(pluginName) {
  const pluginRule = excludedPlugins[pluginName];

  if (!pluginRule) {
    return true;
  }

  if (pluginRule === '*') {
    return false;
  }

  return semver.satisfies(process.version, pluginRule);
}

function getProjectsFromRepos(repos) {
  return repos
    .filter(repo => {
      const match = repo.name.match(/^unexpected-(\w+)$/);
      return match !== null && checkPluginPolicy(match[1]);
    })
    .map(repo => repo.clone_url);
}

function updateDontBreakDefinition(projects) {
  const dontBreakData = require(dontBreakFilePath);

  dontBreakData.projects = projects;

  fs.writeFileSync(dontBreakFilePath, JSON.stringify(dontBreakData, null, 2));
}

got('https://api.github.com/orgs/unexpectedjs/repos', { json: true })
  .then(response => {
    const projects = getProjectsFromRepos(response.body);

    updateDontBreakDefinition(projects);
  })
  .catch(err => console.log(err));
